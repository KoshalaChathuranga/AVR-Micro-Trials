
Code 3 - Bit shifting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ad  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00001079  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a9  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Continuous_mode>:

volatile uint8_t continuous_mode_active = 0;

void Continuous_mode()
{
	continuous_mode_active = 1; 
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTB = PORTB * 2;
		_delay_ms(500);

		if (PINB & (1 << 7))
		{
			PORTB = 0x01;
  96:	91 e0       	ldi	r25, 0x01	; 1

void Continuous_mode()
{
	continuous_mode_active = 1; 

	while (!(PINB & (1 << 7)))
  98:	1e c0       	rjmp	.+60     	; 0xd6 <Continuous_mode+0x46>
	{
		PORTB = PORTB * 2;
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	88 0f       	add	r24, r24
  9e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e9       	ldi	r18, 0x9F	; 159
  a2:	36 e8       	ldi	r19, 0x86	; 134
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <Continuous_mode+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <Continuous_mode+0x20>
  b0:	00 00       	nop
		_delay_ms(500);

		if (PINB & (1 << 7))
  b2:	1f 9b       	sbis	0x03, 7	; 3
  b4:	0a c0       	rjmp	.+20     	; 0xca <Continuous_mode+0x3a>
		{
			PORTB = 0x01;
  b6:	95 b9       	out	0x05, r25	; 5
  b8:	2f e9       	ldi	r18, 0x9F	; 159
  ba:	36 e8       	ldi	r19, 0x86	; 134
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <Continuous_mode+0x2e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <Continuous_mode+0x38>
  c8:	00 00       	nop
			_delay_ms(500);
		}

		if (!(PIND & (1 << Button_2)))
  ca:	4a 99       	sbic	0x09, 2	; 9
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <Continuous_mode+0x46>
		{
			continuous_mode_active = 0; 
  ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = 0x00; 
  d2:	15 b8       	out	0x05, r1	; 5
			return;
  d4:	08 95       	ret

void Continuous_mode()
{
	continuous_mode_active = 1; 

	while (!(PINB & (1 << 7)))
  d6:	1f 9b       	sbis	0x03, 7	; 3
  d8:	e0 cf       	rjmp	.-64     	; 0x9a <Continuous_mode+0xa>
			PORTB = 0x00; 
			return;
		}
	}

	continuous_mode_active = 0; 
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  de:	08 95       	ret

000000e0 <main>:
}

int main(void)
{
	DDRB = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1 << Button_1) | (1 << Button_2);
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	8b b9       	out	0x0b, r24	; 11

	while (1)
	{
		if (!(PIND & (1 << Button_1)))
  ea:	49 99       	sbic	0x09, 1	; 9
  ec:	0c c0       	rjmp	.+24     	; 0x106 <main+0x26>
		{
			PORTB |= (1 << 0);
  ee:	28 9a       	sbi	0x05, 0	; 5
  f0:	2f e9       	ldi	r18, 0x9F	; 159
  f2:	86 e8       	ldi	r24, 0x86	; 134
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x20>
 100:	00 00       	nop
			_delay_ms(500);
			Continuous_mode();
 102:	0e 94 48 00 	call	0x90	; 0x90 <Continuous_mode>
		}

		if (!(PIND & (1 << Button_2)))
 106:	4a 99       	sbic	0x09, 2	; 9
 108:	f0 cf       	rjmp	.-32     	; 0xea <main+0xa>
		{
			PORTB = 0x00; 
 10a:	15 b8       	out	0x05, r1	; 5
 10c:	ee cf       	rjmp	.-36     	; 0xea <main+0xa>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
